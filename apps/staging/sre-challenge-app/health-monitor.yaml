apiVersion: v1
kind: ConfigMap
metadata:
  name: health-monitor-config
  namespace: sre-challenge
data:
  monitor.sh: |
    #!/bin/bash
    # Health monitoring script for automated rollback validation
    
    APP_NAME="sre-challenge-app"
    NAMESPACE="sre-challenge"
    HEALTH_CHECK_URL="https://eu-central-1.sre-challenge-panther.network"
    
    echo "Starting health monitoring for $APP_NAME..."
    
    # Check deployment rollout status
    if ! kubectl rollout status deployment/$APP_NAME -n $NAMESPACE --timeout=300s; then
        echo "ERROR: Deployment rollout failed"
        exit 1
    fi
    
    # Check all pods are ready
    READY_PODS=$(kubectl get pods -n $NAMESPACE -l app=$APP_NAME -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}' | grep -o True | wc -l)
    TOTAL_PODS=$(kubectl get pods -n $NAMESPACE -l app=$APP_NAME --no-headers | wc -l)
    
    if [ "$READY_PODS" -ne "$TOTAL_PODS" ]; then
        echo "ERROR: Not all pods are ready. Ready: $READY_PODS, Total: $TOTAL_PODS"
        exit 1
    fi
    
    # HTTP health check
    for i in {1..30}; do
        if curl -f -s -o /dev/null "$HEALTH_CHECK_URL"; then
            echo "SUCCESS: Application is healthy and responding"
            exit 0
        fi
        echo "Attempt $i/30: Health check failed, retrying in 10s..."
        sleep 10
    done
    
    echo "ERROR: Application failed health checks after 30 attempts"
    exit 1
---
apiVersion: batch/v1
kind: Job
metadata:
  name: post-deployment-health-check
  namespace: sre-challenge
  annotations:
    # This job will be triggered after each deployment
    flux.weave.works/automated: "true"
spec:
  template:
    spec:
      containers:
      - name: health-checker
        image: curlimages/curl:latest
        command: ["/bin/sh"]
        args: ["/scripts/monitor.sh"]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: health-monitor-config
          defaultMode: 0755
      restartPolicy: Never
  backoffLimit: 3